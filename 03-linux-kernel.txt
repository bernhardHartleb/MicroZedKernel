Guide How to compile and install the Xilinx kernel with a linaro armhf toolchain in the MicroZedboard
    Adrian Remonda 2014


Prerequisites
-------------
    Get the kernel sources:
        01-Get_the_kernel_sources.txt

    Linaro toolchain installed
        01-setup_SD_card.txt    
        
    Zedboard with a linux running, in this case xilinx 3.15
        01-setup_SD_card.txt    

Set the compiler
----------------

		export CC=arm-linux-gnueabihf- 
		
		check that is the linaro:
		    ~$ ${CC}gcc --version

Get the config file:

    This file contains the linux configuration. Get the default:
    
		~/linux-xlnx$ make ARCH=arm CROSS_COMPILE=${CC} xilinx_zynq_defconfig
		
    Configure the kernel (works with the default)
		~/linux-xlnx$ make ARCH=arm CROSS_COMPILE=${CC} menuconfig
			
Device tree
-----------

    use the device tree in arch/arm/boot/dts/zynq-zed.dts

~$ gedit arch/arm/boot/dts/zynq-zed.dts

Change the line:

    bootargs = "console=ttyPS0,115200 root=/dev/mmcblk0p2 rw rootfstype=ext4 rootwait earlyprintk";

As next:

    arch/arm/boot/dts/zynq-zed.dts
     	chosen {
    -		bootargs = "console=ttyPS0,115200 root=/dev/ram rw earlyprintk";
    +		bootargs = "console=ttyPS0,115200 root=/dev/mmcblk0p2 rw rootfstype=ext4 rootwait earlyprintk";
     		linux,stdout-path = "/amba/serial@e0001000";
     	};


Compile it:

./scripts/dtc/dtc -I dts -O dtb -o devicetree.dtb arch/arm/boot/dts/zynq-zed.dts 

To add new perhiperals edit the next file:

arch/arm/boot/dts/zynq-7000.dtsi
	        

    Compile kernel
    ===============
    
    jx core counts of your processor in this case 4 cores modifiy as need

make ARCH=arm CROSS_COMPILE=${CC} menuconfig
make ARCH=arm CROSS_COMPILE=${CC} uImage LOADADDR=0x10008000 -j4
make ARCH=arm CROSS_COMPILE=${CC} modules -j4

To clean:

make ARCH=arm CROSS_COMPILE=${CC} clean


    rootfs (skip if you have an sd card running):
    =======
    
wget -c https://rcn-ee.net/deb/minfs/jessie/debian-jessie-minimal-armhf-2014-11-10.tar.xz
sudo tar xfvp ./*-*-*-armhf-*/armhf-rootfs-*.tar -C /media/rootfs/


    Install
    ===========

Insert the sd card. Check were the SD card is mounted with the lsblk command. 

~$ lsblk
sdb      8:16   1   3.7G  0 disk 
|-sdb1   8:17   1    50M  0 part /media/usb0
`-sdb2   8:18   1  1006M  0 part /media/usb1

In this case, the partition were mounted in /media/usb0 and /media/usb1
    
~$ export BOOT=/media/boot; export ROOTFS=/media/rootfs; 

Optional do a backup first:

~$ cp -v $BOOT/uImage $BOOT/backup.$(date "+%y%m%d").uImage
~$ cp -v $BOOT/devicetree.dtb $BOOT/backup.$(date "+%y%m%d").devicetree.dtb

copy the files:

~$ cd linux-xlnx
~$ cp -v arch/arm/boot/uImage $BOOT
~$ cp -v devicetree.dtb $BOOT

In order to write in the rootfs we need to have root rights, and the ROOTFS variable was exported for the user.
We write an script or just hardcoding the path to rootfs as next.

~$ sudo make ARCH=arm modules_install INSTALL_MOD_PATH=/media/usb1

unmount:

~$ sync; sudo umount $BOOT; sudo umount $ROOTFS

Insert the SD card in the MicroZedboar

Configure minicom with the right serial port path

~$ sudo minicom -s
    
Should get the data of the just create kernel 
   
uZed:~$ uname -a
Linux arm 3.15.0-xilinx-00001-gc95b0382a8dc-dirty #5 SMP PREEMPT Mon Dec 8 11:26:26 ART 2014 armv7l GNU/Linux


    Install over ssh
    =================


Once we have a kernel runing is fast to update it over ssh
Assuming that "boot" was mounted in /media/ZYNQ in the MicroZedboard debian and the ip of the board is 192.168.1.101

~$ mkdir linux-xlnx-output

Optional, create a backup:

~$ ssh root@192.168.1.101 'mv /media/ZYNQ/uImage /media/ZYNQ/backup.$(date "+%y%m%d").uImage'
~$ ssh root@192.168.1.101 'mv /media/ZYNQ/devicetree.dtb /media/ZYNQ/backup.$(date "+%y%m%d").deviceTree'

Copy the uImage and the device tree.

~$ scp -p arch/arm/boot/uImage root@192.168.1.101:/media/ZYNQ/
~$ scp -p devicetree.dtb root@192.168.1.101:/media/ZYNQ/

    Install only one module 
    =======================


Example of coping the driver "drivers/remoteproc/zynq_remoteproc.ko" 

~$ make ARCH=arm modules -j4 

Copy zynq_remoteproc.ko in the path /lib/modules, x.y.z is the version of the kernel, in our case: 3.15.0-xilinx-00001-gc95b0382a8dc

scp drivers/remoteproc/zynq_remoteproc.ko root@192.168.1.101:/lib/modules/x.y.z/kernel/drivers/remoteproc/zynq_remoteproc.ko 
